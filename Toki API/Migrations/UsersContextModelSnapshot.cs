// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Toki_API;

#nullable disable

namespace Toki_API.Migrations
{
    [DbContext(typeof(UsersContext))]
    partial class UsersContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Toki_API.Models.Contact", b =>
                {
                    b.Property<int>("intId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContactHolderId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Server")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("last")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("lastdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("lastmsgChatId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("lastmsgCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("lastmsgId")
                        .HasColumnType("int");

                    b.HasKey("intId", "ContactHolderId");

                    b.HasIndex("ContactHolderId");

                    b.HasIndex("lastmsgId", "lastmsgChatId", "lastmsgCreated");

                    b.ToTable("ContactsDB");
                });

            modelBuilder.Entity("Toki_API.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ChatId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SentBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id", "ChatId", "Created");

                    b.ToTable("MessagesDB");
                });

            modelBuilder.Entity("Toki_API.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("server")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("UsersDB");
                });

            modelBuilder.Entity("Toki_API.Models.Contact", b =>
                {
                    b.HasOne("Toki_API.Models.User", null)
                        .WithMany("ContactList")
                        .HasForeignKey("ContactHolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Toki_API.Models.Message", "lastmsg")
                        .WithMany()
                        .HasForeignKey("lastmsgId", "lastmsgChatId", "lastmsgCreated");

                    b.Navigation("lastmsg");
                });

            modelBuilder.Entity("Toki_API.Models.Message", b =>
                {
                    b.HasOne("Toki_API.Models.Contact", null)
                        .WithMany("Messages")
                        .HasForeignKey("Id", "ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Toki_API.Models.Contact", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Toki_API.Models.User", b =>
                {
                    b.Navigation("ContactList");
                });
#pragma warning restore 612, 618
        }
    }
}
